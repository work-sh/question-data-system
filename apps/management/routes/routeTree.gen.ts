/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './__root'
import { Route as LoginRouteImport } from './login'
import { Route as IndexRouteImport } from './index'
import { Route as UsersIndexRouteImport } from './users/index'
import { Route as SourcesIndexRouteImport } from './sources/index'
import { Route as QuestionIndexRouteImport } from './question/index'
import { Route as DatabaseIndexRouteImport } from './database/index'
import { Route as AssessmentSetsIndexRouteImport } from './assessment-sets/index'
import { Route as TemplatesTestPapersRouteImport } from './templates/test-papers'
import { Route as TemplatesTemplatesRouteImport } from './templates/templates'
import { Route as TemplatesQuestionTypesRouteImport } from './templates/question-types'
import { Route as StatisticsUsageStatsRouteImport } from './statistics/usage-stats'
import { Route as StatisticsStatisticsRouteImport } from './statistics/statistics'
import { Route as StatisticsPossessionStatsRouteImport } from './statistics/possession-stats'
import { Route as StatisticsConversionStatsRouteImport } from './statistics/conversion-stats'
import { Route as QuestionCreateRouteImport } from './question/create'
import { Route as MyPageScrapRouteImport } from './my-page/scrap'
import { Route as MyPageProfileRouteImport } from './my-page/profile'
import { Route as DatabaseWorkLogsRouteImport } from './database/work-logs'
import { Route as DatabaseUserActivityRouteImport } from './database/user-activity'
import { Route as DatabaseErrorLogsRouteImport } from './database/error-logs'
import { Route as DatabaseTextbooksIndexRouteImport } from './database/textbooks/index'
import { Route as DatabaseSourcesIndexRouteImport } from './database/sources/index'
import { Route as DatabaseDomainsIndexRouteImport } from './database/domains/index'
import { Route as DatabaseCodesIndexRouteImport } from './database/codes/index'
import { Route as DatabaseChaptersIndexRouteImport } from './database/chapters/index'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const SourcesIndexRoute = SourcesIndexRouteImport.update({
  id: '/sources/',
  path: '/sources/',
  getParentRoute: () => rootRouteImport,
} as any)
const QuestionIndexRoute = QuestionIndexRouteImport.update({
  id: '/question/',
  path: '/question/',
  getParentRoute: () => rootRouteImport,
} as any)
const DatabaseIndexRoute = DatabaseIndexRouteImport.update({
  id: '/database/',
  path: '/database/',
  getParentRoute: () => rootRouteImport,
} as any)
const AssessmentSetsIndexRoute = AssessmentSetsIndexRouteImport.update({
  id: '/assessment-sets/',
  path: '/assessment-sets/',
  getParentRoute: () => rootRouteImport,
} as any)
const TemplatesTestPapersRoute = TemplatesTestPapersRouteImport.update({
  id: '/templates/test-papers',
  path: '/templates/test-papers',
  getParentRoute: () => rootRouteImport,
} as any)
const TemplatesTemplatesRoute = TemplatesTemplatesRouteImport.update({
  id: '/templates/templates',
  path: '/templates/templates',
  getParentRoute: () => rootRouteImport,
} as any)
const TemplatesQuestionTypesRoute = TemplatesQuestionTypesRouteImport.update({
  id: '/templates/question-types',
  path: '/templates/question-types',
  getParentRoute: () => rootRouteImport,
} as any)
const StatisticsUsageStatsRoute = StatisticsUsageStatsRouteImport.update({
  id: '/statistics/usage-stats',
  path: '/statistics/usage-stats',
  getParentRoute: () => rootRouteImport,
} as any)
const StatisticsStatisticsRoute = StatisticsStatisticsRouteImport.update({
  id: '/statistics/statistics',
  path: '/statistics/statistics',
  getParentRoute: () => rootRouteImport,
} as any)
const StatisticsPossessionStatsRoute =
  StatisticsPossessionStatsRouteImport.update({
    id: '/statistics/possession-stats',
    path: '/statistics/possession-stats',
    getParentRoute: () => rootRouteImport,
  } as any)
const StatisticsConversionStatsRoute =
  StatisticsConversionStatsRouteImport.update({
    id: '/statistics/conversion-stats',
    path: '/statistics/conversion-stats',
    getParentRoute: () => rootRouteImport,
  } as any)
const QuestionCreateRoute = QuestionCreateRouteImport.update({
  id: '/question/create',
  path: '/question/create',
  getParentRoute: () => rootRouteImport,
} as any)
const MyPageScrapRoute = MyPageScrapRouteImport.update({
  id: '/my-page/scrap',
  path: '/my-page/scrap',
  getParentRoute: () => rootRouteImport,
} as any)
const MyPageProfileRoute = MyPageProfileRouteImport.update({
  id: '/my-page/profile',
  path: '/my-page/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const DatabaseWorkLogsRoute = DatabaseWorkLogsRouteImport.update({
  id: '/database/work-logs',
  path: '/database/work-logs',
  getParentRoute: () => rootRouteImport,
} as any)
const DatabaseUserActivityRoute = DatabaseUserActivityRouteImport.update({
  id: '/database/user-activity',
  path: '/database/user-activity',
  getParentRoute: () => rootRouteImport,
} as any)
const DatabaseErrorLogsRoute = DatabaseErrorLogsRouteImport.update({
  id: '/database/error-logs',
  path: '/database/error-logs',
  getParentRoute: () => rootRouteImport,
} as any)
const DatabaseTextbooksIndexRoute = DatabaseTextbooksIndexRouteImport.update({
  id: '/database/textbooks/',
  path: '/database/textbooks/',
  getParentRoute: () => rootRouteImport,
} as any)
const DatabaseSourcesIndexRoute = DatabaseSourcesIndexRouteImport.update({
  id: '/database/sources/',
  path: '/database/sources/',
  getParentRoute: () => rootRouteImport,
} as any)
const DatabaseDomainsIndexRoute = DatabaseDomainsIndexRouteImport.update({
  id: '/database/domains/',
  path: '/database/domains/',
  getParentRoute: () => rootRouteImport,
} as any)
const DatabaseCodesIndexRoute = DatabaseCodesIndexRouteImport.update({
  id: '/database/codes/',
  path: '/database/codes/',
  getParentRoute: () => rootRouteImport,
} as any)
const DatabaseChaptersIndexRoute = DatabaseChaptersIndexRouteImport.update({
  id: '/database/chapters/',
  path: '/database/chapters/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/database/error-logs': typeof DatabaseErrorLogsRoute
  '/database/user-activity': typeof DatabaseUserActivityRoute
  '/database/work-logs': typeof DatabaseWorkLogsRoute
  '/my-page/profile': typeof MyPageProfileRoute
  '/my-page/scrap': typeof MyPageScrapRoute
  '/question/create': typeof QuestionCreateRoute
  '/statistics/conversion-stats': typeof StatisticsConversionStatsRoute
  '/statistics/possession-stats': typeof StatisticsPossessionStatsRoute
  '/statistics/statistics': typeof StatisticsStatisticsRoute
  '/statistics/usage-stats': typeof StatisticsUsageStatsRoute
  '/templates/question-types': typeof TemplatesQuestionTypesRoute
  '/templates/templates': typeof TemplatesTemplatesRoute
  '/templates/test-papers': typeof TemplatesTestPapersRoute
  '/assessment-sets': typeof AssessmentSetsIndexRoute
  '/database': typeof DatabaseIndexRoute
  '/question': typeof QuestionIndexRoute
  '/sources': typeof SourcesIndexRoute
  '/users': typeof UsersIndexRoute
  '/database/chapters': typeof DatabaseChaptersIndexRoute
  '/database/codes': typeof DatabaseCodesIndexRoute
  '/database/domains': typeof DatabaseDomainsIndexRoute
  '/database/sources': typeof DatabaseSourcesIndexRoute
  '/database/textbooks': typeof DatabaseTextbooksIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/database/error-logs': typeof DatabaseErrorLogsRoute
  '/database/user-activity': typeof DatabaseUserActivityRoute
  '/database/work-logs': typeof DatabaseWorkLogsRoute
  '/my-page/profile': typeof MyPageProfileRoute
  '/my-page/scrap': typeof MyPageScrapRoute
  '/question/create': typeof QuestionCreateRoute
  '/statistics/conversion-stats': typeof StatisticsConversionStatsRoute
  '/statistics/possession-stats': typeof StatisticsPossessionStatsRoute
  '/statistics/statistics': typeof StatisticsStatisticsRoute
  '/statistics/usage-stats': typeof StatisticsUsageStatsRoute
  '/templates/question-types': typeof TemplatesQuestionTypesRoute
  '/templates/templates': typeof TemplatesTemplatesRoute
  '/templates/test-papers': typeof TemplatesTestPapersRoute
  '/assessment-sets': typeof AssessmentSetsIndexRoute
  '/database': typeof DatabaseIndexRoute
  '/question': typeof QuestionIndexRoute
  '/sources': typeof SourcesIndexRoute
  '/users': typeof UsersIndexRoute
  '/database/chapters': typeof DatabaseChaptersIndexRoute
  '/database/codes': typeof DatabaseCodesIndexRoute
  '/database/domains': typeof DatabaseDomainsIndexRoute
  '/database/sources': typeof DatabaseSourcesIndexRoute
  '/database/textbooks': typeof DatabaseTextbooksIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/database/error-logs': typeof DatabaseErrorLogsRoute
  '/database/user-activity': typeof DatabaseUserActivityRoute
  '/database/work-logs': typeof DatabaseWorkLogsRoute
  '/my-page/profile': typeof MyPageProfileRoute
  '/my-page/scrap': typeof MyPageScrapRoute
  '/question/create': typeof QuestionCreateRoute
  '/statistics/conversion-stats': typeof StatisticsConversionStatsRoute
  '/statistics/possession-stats': typeof StatisticsPossessionStatsRoute
  '/statistics/statistics': typeof StatisticsStatisticsRoute
  '/statistics/usage-stats': typeof StatisticsUsageStatsRoute
  '/templates/question-types': typeof TemplatesQuestionTypesRoute
  '/templates/templates': typeof TemplatesTemplatesRoute
  '/templates/test-papers': typeof TemplatesTestPapersRoute
  '/assessment-sets/': typeof AssessmentSetsIndexRoute
  '/database/': typeof DatabaseIndexRoute
  '/question/': typeof QuestionIndexRoute
  '/sources/': typeof SourcesIndexRoute
  '/users/': typeof UsersIndexRoute
  '/database/chapters/': typeof DatabaseChaptersIndexRoute
  '/database/codes/': typeof DatabaseCodesIndexRoute
  '/database/domains/': typeof DatabaseDomainsIndexRoute
  '/database/sources/': typeof DatabaseSourcesIndexRoute
  '/database/textbooks/': typeof DatabaseTextbooksIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/database/error-logs'
    | '/database/user-activity'
    | '/database/work-logs'
    | '/my-page/profile'
    | '/my-page/scrap'
    | '/question/create'
    | '/statistics/conversion-stats'
    | '/statistics/possession-stats'
    | '/statistics/statistics'
    | '/statistics/usage-stats'
    | '/templates/question-types'
    | '/templates/templates'
    | '/templates/test-papers'
    | '/assessment-sets'
    | '/database'
    | '/question'
    | '/sources'
    | '/users'
    | '/database/chapters'
    | '/database/codes'
    | '/database/domains'
    | '/database/sources'
    | '/database/textbooks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/database/error-logs'
    | '/database/user-activity'
    | '/database/work-logs'
    | '/my-page/profile'
    | '/my-page/scrap'
    | '/question/create'
    | '/statistics/conversion-stats'
    | '/statistics/possession-stats'
    | '/statistics/statistics'
    | '/statistics/usage-stats'
    | '/templates/question-types'
    | '/templates/templates'
    | '/templates/test-papers'
    | '/assessment-sets'
    | '/database'
    | '/question'
    | '/sources'
    | '/users'
    | '/database/chapters'
    | '/database/codes'
    | '/database/domains'
    | '/database/sources'
    | '/database/textbooks'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/database/error-logs'
    | '/database/user-activity'
    | '/database/work-logs'
    | '/my-page/profile'
    | '/my-page/scrap'
    | '/question/create'
    | '/statistics/conversion-stats'
    | '/statistics/possession-stats'
    | '/statistics/statistics'
    | '/statistics/usage-stats'
    | '/templates/question-types'
    | '/templates/templates'
    | '/templates/test-papers'
    | '/assessment-sets/'
    | '/database/'
    | '/question/'
    | '/sources/'
    | '/users/'
    | '/database/chapters/'
    | '/database/codes/'
    | '/database/domains/'
    | '/database/sources/'
    | '/database/textbooks/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  DatabaseErrorLogsRoute: typeof DatabaseErrorLogsRoute
  DatabaseUserActivityRoute: typeof DatabaseUserActivityRoute
  DatabaseWorkLogsRoute: typeof DatabaseWorkLogsRoute
  MyPageProfileRoute: typeof MyPageProfileRoute
  MyPageScrapRoute: typeof MyPageScrapRoute
  QuestionCreateRoute: typeof QuestionCreateRoute
  StatisticsConversionStatsRoute: typeof StatisticsConversionStatsRoute
  StatisticsPossessionStatsRoute: typeof StatisticsPossessionStatsRoute
  StatisticsStatisticsRoute: typeof StatisticsStatisticsRoute
  StatisticsUsageStatsRoute: typeof StatisticsUsageStatsRoute
  TemplatesQuestionTypesRoute: typeof TemplatesQuestionTypesRoute
  TemplatesTemplatesRoute: typeof TemplatesTemplatesRoute
  TemplatesTestPapersRoute: typeof TemplatesTestPapersRoute
  AssessmentSetsIndexRoute: typeof AssessmentSetsIndexRoute
  DatabaseIndexRoute: typeof DatabaseIndexRoute
  QuestionIndexRoute: typeof QuestionIndexRoute
  SourcesIndexRoute: typeof SourcesIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
  DatabaseChaptersIndexRoute: typeof DatabaseChaptersIndexRoute
  DatabaseCodesIndexRoute: typeof DatabaseCodesIndexRoute
  DatabaseDomainsIndexRoute: typeof DatabaseDomainsIndexRoute
  DatabaseSourcesIndexRoute: typeof DatabaseSourcesIndexRoute
  DatabaseTextbooksIndexRoute: typeof DatabaseTextbooksIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sources/': {
      id: '/sources/'
      path: '/sources'
      fullPath: '/sources'
      preLoaderRoute: typeof SourcesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/question/': {
      id: '/question/'
      path: '/question'
      fullPath: '/question'
      preLoaderRoute: typeof QuestionIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/database/': {
      id: '/database/'
      path: '/database'
      fullPath: '/database'
      preLoaderRoute: typeof DatabaseIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assessment-sets/': {
      id: '/assessment-sets/'
      path: '/assessment-sets'
      fullPath: '/assessment-sets'
      preLoaderRoute: typeof AssessmentSetsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/templates/test-papers': {
      id: '/templates/test-papers'
      path: '/templates/test-papers'
      fullPath: '/templates/test-papers'
      preLoaderRoute: typeof TemplatesTestPapersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/templates/templates': {
      id: '/templates/templates'
      path: '/templates/templates'
      fullPath: '/templates/templates'
      preLoaderRoute: typeof TemplatesTemplatesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/templates/question-types': {
      id: '/templates/question-types'
      path: '/templates/question-types'
      fullPath: '/templates/question-types'
      preLoaderRoute: typeof TemplatesQuestionTypesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/statistics/usage-stats': {
      id: '/statistics/usage-stats'
      path: '/statistics/usage-stats'
      fullPath: '/statistics/usage-stats'
      preLoaderRoute: typeof StatisticsUsageStatsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/statistics/statistics': {
      id: '/statistics/statistics'
      path: '/statistics/statistics'
      fullPath: '/statistics/statistics'
      preLoaderRoute: typeof StatisticsStatisticsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/statistics/possession-stats': {
      id: '/statistics/possession-stats'
      path: '/statistics/possession-stats'
      fullPath: '/statistics/possession-stats'
      preLoaderRoute: typeof StatisticsPossessionStatsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/statistics/conversion-stats': {
      id: '/statistics/conversion-stats'
      path: '/statistics/conversion-stats'
      fullPath: '/statistics/conversion-stats'
      preLoaderRoute: typeof StatisticsConversionStatsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/question/create': {
      id: '/question/create'
      path: '/question/create'
      fullPath: '/question/create'
      preLoaderRoute: typeof QuestionCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my-page/scrap': {
      id: '/my-page/scrap'
      path: '/my-page/scrap'
      fullPath: '/my-page/scrap'
      preLoaderRoute: typeof MyPageScrapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my-page/profile': {
      id: '/my-page/profile'
      path: '/my-page/profile'
      fullPath: '/my-page/profile'
      preLoaderRoute: typeof MyPageProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/database/work-logs': {
      id: '/database/work-logs'
      path: '/database/work-logs'
      fullPath: '/database/work-logs'
      preLoaderRoute: typeof DatabaseWorkLogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/database/user-activity': {
      id: '/database/user-activity'
      path: '/database/user-activity'
      fullPath: '/database/user-activity'
      preLoaderRoute: typeof DatabaseUserActivityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/database/error-logs': {
      id: '/database/error-logs'
      path: '/database/error-logs'
      fullPath: '/database/error-logs'
      preLoaderRoute: typeof DatabaseErrorLogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/database/textbooks/': {
      id: '/database/textbooks/'
      path: '/database/textbooks'
      fullPath: '/database/textbooks'
      preLoaderRoute: typeof DatabaseTextbooksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/database/sources/': {
      id: '/database/sources/'
      path: '/database/sources'
      fullPath: '/database/sources'
      preLoaderRoute: typeof DatabaseSourcesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/database/domains/': {
      id: '/database/domains/'
      path: '/database/domains'
      fullPath: '/database/domains'
      preLoaderRoute: typeof DatabaseDomainsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/database/codes/': {
      id: '/database/codes/'
      path: '/database/codes'
      fullPath: '/database/codes'
      preLoaderRoute: typeof DatabaseCodesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/database/chapters/': {
      id: '/database/chapters/'
      path: '/database/chapters'
      fullPath: '/database/chapters'
      preLoaderRoute: typeof DatabaseChaptersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  DatabaseErrorLogsRoute: DatabaseErrorLogsRoute,
  DatabaseUserActivityRoute: DatabaseUserActivityRoute,
  DatabaseWorkLogsRoute: DatabaseWorkLogsRoute,
  MyPageProfileRoute: MyPageProfileRoute,
  MyPageScrapRoute: MyPageScrapRoute,
  QuestionCreateRoute: QuestionCreateRoute,
  StatisticsConversionStatsRoute: StatisticsConversionStatsRoute,
  StatisticsPossessionStatsRoute: StatisticsPossessionStatsRoute,
  StatisticsStatisticsRoute: StatisticsStatisticsRoute,
  StatisticsUsageStatsRoute: StatisticsUsageStatsRoute,
  TemplatesQuestionTypesRoute: TemplatesQuestionTypesRoute,
  TemplatesTemplatesRoute: TemplatesTemplatesRoute,
  TemplatesTestPapersRoute: TemplatesTestPapersRoute,
  AssessmentSetsIndexRoute: AssessmentSetsIndexRoute,
  DatabaseIndexRoute: DatabaseIndexRoute,
  QuestionIndexRoute: QuestionIndexRoute,
  SourcesIndexRoute: SourcesIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
  DatabaseChaptersIndexRoute: DatabaseChaptersIndexRoute,
  DatabaseCodesIndexRoute: DatabaseCodesIndexRoute,
  DatabaseDomainsIndexRoute: DatabaseDomainsIndexRoute,
  DatabaseSourcesIndexRoute: DatabaseSourcesIndexRoute,
  DatabaseTextbooksIndexRoute: DatabaseTextbooksIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
